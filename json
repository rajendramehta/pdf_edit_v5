<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Text Replacer</title>
    <style>
        /* (same styles as before, unchanged) */
    </style>
</head>
<body>
    <!-- Top navigation bar -->
    <div class="navbar">
        <a href="/" class="navbar-brand">Document Text Replacer - Local Development</a>
    </div>

    <!-- Main application container -->
    <div class="container">
        <h1>Document Text Replacer</h1>
        <p class="subtitle">Replace text in PDF, CSV, XML, XPT files and ZIP folders with ease</p>
        
        <!-- Left panel -->
        <div class="left-panel">
            <div class="form-group">
                <label for="old_text">Text to Find</label>
                <input type="text" id="old_text" placeholder="Enter the text you want to replace..." required>
            </div>
            <div class="form-group">
                <label for="new_text">Replace With</label>
                <input type="text" id="new_text" placeholder="Enter the replacement text...">
            </div>
            <div class="form-group">
                <label>Upload Documents</label>
                <div class="file-upload-area" id="fileUploadArea">
                    <span class="upload-icon">&#8593;</span>
                    <div class="upload-text">Drop your files here or click to browse</div>
                    <div class="upload-subtext">Supports PDF, CSV, XML, XPT files and ZIP folders</div>
                    <input type="file" id="pdf-file-input" accept=".pdf,.csv,.xml,.xpt,.zip" multiple>
                    <div class="file-info" id="fileInfo"></div>
                </div>
                <div class="file-types">Supported formats: PDF, CSV, XML, XPT, ZIP (Max 50MB total)</div>
                <div class="multiple-files-info">You can select multiple files or upload a ZIP folder containing supported files</div>
            </div>
        </div>
        
        <!-- Right panel -->
        <div class="right-panel">
            <div class="process-steps">
                <div class="step">
                    <div class="step-number">1</div>
                    <div class="step-text">Enter the text you want to find and replace</div>
                </div>
                <div class="step">
                    <div class="step-number">2</div>
                    <div class="step-text">Upload multiple documents or a ZIP folder</div>
                </div>
                <div class="step">
                    <div class="step-number">3</div>
                    <div class="step-text">Click process to generate your modified files</div>
                </div>
            </div>
            
            <button type="button" class="btn btn-primary" id="processBtn" disabled>
                <span>Process Documents</span>
            </button>
            
            <div class="spinner" id="loadingSpinner">
                <span>Processing your documents...</span>
            </div>
            
            <div class="status-message" id="statusMessage"></div>
            
            <button type="button" class="btn btn-success" id="downloadBtn" style="display: none;">
                <span>Download Modified Files</span>
            </button>
        </div>
    </div>
    
    <script>
        // (other JS code unchanged up to processBtn listener)

        processBtn.addEventListener('click', async function() {
            if (currentFiles.length === 0 || !oldTextInput.value.trim()) {
                showStatus('Please select files and enter text to find', 'error');
                return;
            }
            
            const formData = new FormData();
            currentFiles.forEach(function(file) {
                formData.append('pdf_file', file);
            });
            formData.append('old_text', oldTextInput.value.trim());
            formData.append('new_text', newTextInput.value.trim());
            
            setProcessingState(true);
            
            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    // ✅ safer JSON + fallback handling
                    let errorMsg = 'Processing failed';
                    try {
                        const error = await response.json();
                        errorMsg = error.error || errorMsg;
                    } catch {
                        const text = await response.text();
                        errorMsg = text || errorMsg;
                    }
                    throw new Error(errorMsg);
                }

                // ✅ Always treat successful response as blob (file)
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                
                let filename;
                if (currentFiles.length === 1) {
                    filename = 'modified_' + currentFiles[0].name;
                } else {
                    filename = 'modified_files.zip';
                }
                
                downloadBtn.setAttribute('data-url', url);
                downloadBtn.setAttribute('data-filename', filename);
                
                showStatus('Documents processed successfully!', 'success');
                downloadBtn.style.display = 'flex';
                
            } catch (error) {
                showStatus('Error: ' + error.message, 'error');
            } finally {
                setProcessingState(false);
            }
        });

        // (rest of JS unchanged)
    </script>
</body>
</html>
